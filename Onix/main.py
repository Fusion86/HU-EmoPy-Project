import os
import cv2
import numpy as np
import onnxruntime as rt
import matplotlib.pyplot as plt

emotions = ["neutral", "happiness", "surprise",
            "sadness", "anger", "disgust", "fear", "contempt"]


def softmax(x):
    """Compute softmax values (probabilities from 0 to 1) for each possible label."""
    x = x.reshape(-1)
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum(axis=0)


def postprocess(scores):
    """This function takes the scores generated by the network and
    returns the class IDs in decreasing order of probability."""
    prob = softmax(scores)
    prob = np.squeeze(prob)
    classes = np.argsort(prob)[::-1]
    return classes


def run(sess, file):
    # Grayscale
    image = cv2.imread(file)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Resize
    dim = (64, 64)
    resized = cv2.resize(gray, dim, interpolation=cv2.INTER_AREA)

    # plt.imshow(cv2.cvtColor(resized, cv2.COLOR_BGR2RGB))
    # plt.show()

    # Transform data
    fl32 = np.array(resized, dtype=np.float32)
    input_data = np.array([fl32]).reshape([1] + [1] + list(dim))

    print("Input data shape: {}".format(input_data.shape))

    input_name = sess.get_inputs()[0].name
    output_name = sess.get_outputs()[0].name

    # Run model
    pred_onx = sess.run([output_name], {input_name: input_data})[0]
    print(pred_onx)

    # Post process
    classes = softmax(pred_onx)
    emotion = postprocess(classes)

    # Show output
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.text(0, 0, emotions[emotion[0]])
    plt.text(0, 30, emotions[emotion[1]])
    plt.show()


if __name__ == "__main__":
    # Setup session
    sess = rt.InferenceSession("ferplus.onnx")

    for x in sess.get_inputs():
        print("Input: {}".format(x))

    for x in sess.get_outputs():
        print("Output: {}".format(x))

    for root, dirs, files in os.walk(os.path.abspath("/home/woutervisser/Repos/HU-EmoPy-Project/EmoPy-Demo/images/")):
        for file in files:
            run(sess, os.path.join(root, file))
